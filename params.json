{"name":"Autocompile","tagline":"a tool to help generate makefile","body":"autocompile\r\n===========\r\n\r\na tool set to help generate makefile and build a tree structure\r\n\r\nthis tool set contains two tools,\r\n1. autocompile\r\nit goes through current directory to looking for .c and .cpp files, generate dependencies according to g++ -M output, and output makefile to stdout.\r\nautocompile looks for .autocompile from $HOMEPATH/.autocompile and ./.autocompile as configuration\r\n2. maketree\r\nit goes through current directory to looking for sub folders to compile, if a subfolder contains Makefile / makefile / GNUmakefile, it will call make, otherwise call maketree\r\nsupport command line parameters\r\n  - -c make clean instead of make\r\n  - -v output the commands to run, instead of run them\r\n  - an integer, the concurrency, maketree will use at most these threads\r\nmaketree also looks for .autocompile from $HOMEPATH/.autocompile and ./.autocompile as configuration\r\nmaketree looks for dirs file in current folder to decide the folders ignored, and the dependencies between the folders\r\n\r\nusually you do not need to change anything to let autocompile and maketree work in linux or cygwin environments, except for these parameters\r\nin .autocompile file\r\n  - main\r\n  - out\r\nif you need to build a binary instead of object files from a source file, the detail of these parameters are in the follow section\r\nin dirs file\r\n  - folder1:folder2 folder3\r\nif folder1 depends on folder2 and folder3, i.e. folder1 can only be built after folder2 and folder3\r\n\r\n.autocompile can include\r\n  - cc-m\r\n    the g++ -M command as boost::format string, default value is g++ -M %1%\r\n    alias cc_m, compiler-dependency, compiler-dependencies, cc_M, cc-M\r\n  - cc-c\r\n    the g++ -c command as boost::format string, default value is g++ -c %1% -o %2%\r\n    alias cc_c, compile\r\n  - cc\r\n    the g++ command as boost::format string, default value is g++ %1% -o %2%\r\n    alias compile-link\r\n  - cc-flag\r\n    extra g++ options, default value is -std=c++11\r\n    alias cc_flag, compiler-flag, compiler-option\r\n  - dlink\r\n    the dynamic linking command for the compiler as boost::format string, default value is -l%1%\r\n    alias dynamic-link\r\n  - list\r\n    the system command to list .c and .cpp file, default value is ls -1 *.cpp *.c\r\n  - main\r\n    the name of the cpp file contains main, if this file is existing, the makefile will compile and link it, default value is main.cpp\r\n  - objs\r\n    the static libs link to the binary generated, separated by ',' ' ' or ';', default value is empty\r\n    alias libs, static-libs\r\n  - out\r\n    the output file name of the binary generated, default value is main\r\n    alias output\r\n  - dlibs\r\n    the dynamic libs link to the binary generated, separated by ',' ' ' or ';', default value is empty\r\n    alias dynamic-libs\r\n  - rm\r\n    the system command to remove several files, default value is rm\r\n    alias remove\r\n  - list-dir\r\n    the system command to list all directories in a folder, default value is find . -maxdepth 1 -mindepth 1 -type d -printf %P\\\\n\r\n    alias list_dir\r\n  - list-makefile\r\n    the system command to list makefile in a folder, default value is ls -1 Makefile makefile GNUmakefile\r\n    alias list_makefile\r\n  - cd\r\n    the system command to change current directory as boost::format string, default value is cd %1%\r\n  - command-separator\r\n    the system defined character to run several commands serially as boost::format string, default value is %1% ; %2%\r\n    alias command_separator\r\n  - make\r\n    the make command to run makefile, default value is make\r\n  - maketree\r\n    the maketree command to run maketree in a folder, default value is maketree\r\n  - make-clean\r\n    the make clean command to run clean target in a makefile, default value is make clean\r\n    alias make_clean\r\n  - maketree-clean\r\n    the maketree clean command to run in a folder, default value is maketree -c\r\n    alias maketree_clean\r\n  - command-surround\r\n    the system defined method to surround several serial command in boost::format string, default value is (%1%)\r\n    alias command_surround\r\n\r\ndirs can include\r\n  - -folder\r\n    remove folder from build targets in current directory\r\n  - folder1:folder2 folder3\r\n    folder1 depends on folder2 and folder3\r\n    you can also write this line as\r\n    folder1 folder2 folder3\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}